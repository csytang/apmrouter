<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jms="http://www.springframework.org/schema/jms"

       xmlns:lang="http://www.springframework.org/schema/lang"       
       xsi:schemaLocation="
       http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       
       http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd
       "  >
	
	
	
	
	<context:annotation-config/>
	<context:mbean-export registration="ignoreExisting" />
	<tx:annotation-driven transaction-manager="txManager"  />
	
	<!-- 
	<context:component-scan base-package="org.helios" >
		<context:include-filter type="assignable" expression="org.helios.apmrouter.subscription.criteria.builder.AbstractSubscriptionCriteriaBuilder"/>
	</context:component-scan>
	-->
	
	<bean id="sysProps" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"/>

	<bean id="CatalogService" class="org.helios.apmrouter.catalog.jdbc.h2.H2JDBCMetricCatalog" depends-on="dbInit" >
		<property name="realtime" value="false" />
		<property name="chronicleManager" ref="chronicleTs" />		
	</bean>
	
	<bean id="JMXSubscriptionCriteriaBuilder" class="org.helios.apmrouter.subscription.impls.jmx.JMXSubscriptionCriteriaBuilder"/>
	
	<bean id="ServerTracerFactory" class="org.helios.apmrouter.server.tracing.ServerTracerFactory" factory-method="getInstance">		
		<property name="metricCatalogService" ref="CatalogService"/>
	</bean>
	<bean id="ServerMonitor" class="org.helios.apmrouter.server.monitor.ServerMonitor" depends-on="ServerTracerFactory" />		

	<bean id="HotDeployer" class="org.helios.apmrouter.deployer.SpringHotDeployer">
		<property name="hotDirNames">
			<set>
				<!-- 
				<value>C:/Users/nwhitehe/.apmrouter/hotdir/jolokia</value>
				<value>C:/Users/nwhitehe/.apmrouter/hotdir/destinations</value>
				
				<value>/home/nwhitehead/.apmrouter/hotdir/jolokia</value>
				<value>/home/nwhitehead/.apmrouter/hotdir/nash</value>
				-->
			</set>
		</property>
	</bean>
	
	<bean id="ChannelSessions" class="org.helios.apmrouter.server.services.session.SharedChannelGroup" factory-method="getInstance" >
		<property name="metricCatalogService" ref="CatalogService"/>
	</bean>
	
	<bean id="SpringEventPool" class="org.helios.apmrouter.util.thread.ManagedThreadPool">
		<qualifier value="SpringEvent"/>
		<constructor-arg>
			<bean id="SpringEventPoolConfig" class="org.helios.apmrouter.util.thread.ThreadPoolConfig">
				<property name="corePoolSize" value="1" />
				<property name="maximumPoolSize" value="5" />
				<property name="coreThreadsStarted" value="1" />
				<property name="daemonThreads" value="true" />
			</bean>
		</constructor-arg>
	</bean>
	
	<bean id="UDPAgentListenerWorkers" class="org.helios.apmrouter.util.thread.ManagedThreadPool">		
		<constructor-arg>
			<bean id="UDPAgentListenerWorkersConfig" class="org.helios.apmrouter.util.thread.ThreadPoolConfig">
				<property name="corePoolSize" value="1" />
				<property name="maximumPoolSize" value="100" />
				<property name="coreThreadsStarted" value="1" />
			</bean>
		</constructor-arg>
	</bean>
 
<!-- 
 	<bean id="ManagedChannelGroup" class="org.helios.apmrouter.server.net.listener.netty.group.ManagedChannelGroup">
 		 <constructor-arg value="APMRouterChannelGroup" />
 	</bean>
 --> 
 	<bean id="MetricCatalogIniter" class="org.helios.apmrouter.catalog.MetricCatalogInitializer">
 		<property name="catalogClassName" value="org.helios.apmrouter.metric.catalog.heap.StringKeyedHeapMetricCatalog" />
 		
 	</bean>
 	
 	<bean id="MetricCatalog" factory-bean="MetricCatalogIniter" factory-method="getCatalog" />
 	
 	<bean id="AgentMetricHandler" class="org.helios.apmrouter.server.net.listener.netty.handlers.AgentMetricHandler">
 		<property name="metricCatalog" ref="MetricCatalog" />
 	</bean>
 	
 	<bean id="PingRequestHandler" class="org.helios.apmrouter.server.net.listener.netty.handlers.PingRequestHandler" />
 	
 	
 	<bean id="UDPAgentOperationRouter" class="org.helios.apmrouter.server.net.listener.netty.handlers.udp.UDPAgentOperationRouter" />
 	
 	<bean id="UDPExecutionHandler" class="org.jboss.netty.handler.execution.ExecutionHandler">
 		<constructor-arg>
		 	<bean id="UDPMemoryAwareThreadPoolExecutor" class="org.jboss.netty.handler.execution.MemoryAwareThreadPoolExecutor" >
		 		<constructor-arg value="10" />
		 		<constructor-arg value="1048576" />
		 		<constructor-arg value="1048576" />
		 	</bean> 		
 		</constructor-arg>
 	</bean>
 	
 	
 	
 	
 	<bean id="UDPAgentListener" class="org.helios.apmrouter.server.net.listener.netty.UDPAgentListener">
 		<property name="bindHost" value="0.0.0.0" />
 		<property name="bindPort" value="2094" />
 		<property name="channelHandlers">
 			<map>
 				<entry key="0" value="UDPExecutionHandler" />
 				<entry key="1" value="UDPAgentOperationRouter" />
 			</map>
 		</property>
 		<property name="workerPool" ref="UDPAgentListenerWorkers" />
 	</bean>
 	
 	
 	<bean id="metricLastTimeSeenService" class="org.helios.apmrouter.catalog.MetricLastTimeSeenService"/>

 	
 	<bean id="PatternRouter" class="org.helios.apmrouter.router.PatternRouter" >
 		<property name="routingQueueFair" value="true" />
 		<property name="routingQueueSize" value="5000" />
 		<property name="routingWorkers" value="8" />
 		<property name="threadPool" ref="PatternRouterWorkers" />
 	</bean>
 	
 	<bean id="Conflator" class="org.helios.apmrouter.router.MetricConflationService">
 		<property name="conflationPeriod" value="1000" />
 		<property name="maxQueueSize" value="1000" />
 		<property name="workerThreads" value="1" />
 	</bean>

	<bean id="PatternRouterWorkers" class="org.helios.apmrouter.util.thread.ManagedThreadPool">		
		<constructor-arg>
			<bean id="PatternRouterWorkersConfig" class="org.helios.apmrouter.util.thread.ThreadPoolConfig">
				<property name="corePoolSize" value="8" />
				<property name="queueSize" value="10000" />
				<property name="maximumPoolSize" value="8" />
				<property name="coreThreadsStarted" value="8" />
			</bean>
		</constructor-arg>
	</bean>


	<bean id="APMRouterScheduler" class="org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler" />
	
	
<bean id="catalog" class="org.helios.apmrouter.dataservice.json.catalog.CatalogJSONDataService" />
<bean id="sub" class="org.helios.apmrouter.dataservice.json.sub.SubscriptionDataService" />
<bean id="jmx" class="org.helios.apmrouter.subscription.impls.jmx.JMXSubscriptionCriteriaBuilder" /> 	
<bean id="h2ts" class="org.helios.apmrouter.dataservice.json.h2timeseries.H2TimeSeriesJSONDataService">
	<property name="dataSource" ref="DataSource"></property>
</bean>

	<bean id="MetricURISubscriptionService" class="org.helios.apmrouter.dataservice.json.catalog.MetricURISubscriptionService">
	
		<property name="metricStateChangeEventThreads" value="1" />
		<property name="newMetricEventThreads" value="1" />
		<property name="catalogDataSource" ref="DataSource" />		
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<bean id="agentMetricURISubHandler" class="org.helios.apmrouter.server.net.listener.netty.handlers.MetricURISubscriptionHandler">
		<property name="subService" ref="MetricURISubscriptionService"/>
	</bean>

	
	<bean id="DataServiceWorkers" class="org.helios.apmrouter.util.thread.ManagedThreadPool">		
		<constructor-arg>
			<bean id="DataServiceWorkersConfig" class="org.helios.apmrouter.util.thread.ThreadPoolConfig">
				<property name="corePoolSize" value="1" />
				<property name="maximumPoolSize" value="100" />
				<property name="coreThreadsStarted" value="1" />
				<property name="queueSize" value="1" />
			</bean>
		</constructor-arg>
	</bean>
	
	<bean id="DataServiceBoss" class="org.helios.apmrouter.util.thread.ManagedThreadPool">		
		<constructor-arg>
			<bean id="DataServiceBossConfig" class="org.helios.apmrouter.util.thread.ThreadPoolConfig">
				<property name="corePoolSize" value="1" />
				<property name="maximumPoolSize" value="100" />
				<property name="coreThreadsStarted" value="1" />
				<property name="queueSize" value="1" />
			</bean>
		</constructor-arg>
	</bean>
	
 	<bean id="DataServiceListener" class="org.helios.apmrouter.server.services.DataServer">
 		<property name="workerPool" ref="DataServiceWorkers" />
 		<property name="bossPool" ref="DataServiceBoss" />
 	 		<property name="bindHost" value="0.0.0.0" />
 		<property name="bindPort" value="8087" />
 	
		 <property name="channelOptions">
		 	<map>
		 		<entry key="child.keepAlive"><value type="boolean" >true</value> </entry>
		 	</map>
		 </property> 		
 	</bean>

	 <bean id="JsonResponseDownstreamHandler" class="org.helios.apmrouter.server.net.listener.netty.handlers.JsonResponseDownstreamHandler" />
 	 
 	 <bean id="ProtocolSwitch" class="org.helios.apmrouter.server.unification.protocol.ProtocolSwitch" />
 	 
 	 <bean id="ServerPipelineFactory" class="org.helios.apmrouter.server.unification.ServerPipelineFactory" />
 	 
 	 <bean id="HttpProtocol" class="org.helios.apmrouter.server.unification.protocol.http.HttpProtocolInitiator" />
 	 
 	 <bean id="HttpPipelineModifier" class="org.helios.apmrouter.server.unification.pipeline.http.HttpPipelineModifier"/>
 	 
 	 <bean id="HttpRequestRouter" class="org.helios.apmrouter.server.unification.pipeline.http.HttpRequestRouter" />
 	 
 	<bean id="fs" class="org.helios.apmrouter.server.unification.pipeline.http.HttpStaticFileServerHandler" >
 		<constructor-arg value="./src/main/resources/www" />
 	</bean>
 	
 	<bean id="snoop" class="org.helios.apmrouter.server.unification.pipeline.http.HttpSnoopServerHandler">
 		<property name="uriPatterns">
 			<set>
 				<value>/snoop</value>
 				<value>/snoop/</value>
 			</set>
 		</property>
 	</bean>
 	
 	 
 	 <bean id="ws" class="org.helios.apmrouter.server.unification.pipeline.http.WebSocketServiceHandler" />
 	
 	<bean id="JSONRequestRouter" class="org.helios.apmrouter.dataservice.json.JSONRequestRouter" />
 	
	
	<bean id="SubscriptionService" class="org.helios.apmrouter.subscription.SubscriptionService" />
	
	


	<bean id="ProxyWorkers" class="org.helios.apmrouter.util.thread.ManagedThreadPool">		
		<constructor-arg>
			<bean id="ProxyWorkersConfig" class="org.helios.apmrouter.util.thread.ThreadPoolConfig">
				<property name="corePoolSize" value="1" />
				<property name="maximumPoolSize" value="100" />
				<property name="coreThreadsStarted" value="1" />
				<property name="queueSize" value="1" />
			</bean>
		</constructor-arg>
	</bean>
	
	<bean id="ProxyBoss" class="org.helios.apmrouter.util.thread.ManagedThreadPool">		
		<constructor-arg>
			<bean id="ProxyBossConfig" class="org.helios.apmrouter.util.thread.ThreadPoolConfig">
				<property name="corePoolSize" value="1" />
				<property name="maximumPoolSize" value="100" />
				<property name="coreThreadsStarted" value="1" />
				<property name="queueSize" value="1" />
			</bean>
		</constructor-arg>
	</bean>
 	
 	
 	<bean id="ProxyChannelFactory" class="org.helios.apmrouter.server.unification.pipeline.http.proxy.ProxyChannelFactory">
 		<property name="workerPool" ref="ProxyWorkers" />
 		<property name="bossPool" ref="ProxyBoss" />
		 <property name="channelOptions">
		 	<map>
		 		<entry key="keepAlive"><value type="boolean" >true</value> </entry>
		 		<entry key="tcpNoDelay"><value type="boolean" >true</value> </entry>
		 		<entry key="reuseAddress"><value type="boolean" >true</value> </entry>
		 		<entry key="connectTimeoutMillis"><value type="int" >1000</value> </entry>		 		
		 	</map>
		 </property> 		
 	</bean>
 	
 	<bean id="jmxProxy" class="org.helios.apmrouter.server.unification.pipeline.http.proxy.HttpRequestProxy">
 		<property name="targetHost" value="localhost" />
 		<property name="targetPort" value="8161" />
 		<property name="uriPatterns">
 			<set>
 				<value>/jolokia</value>
 				<value>/jolokia/</value>
 				<value>/jmx/</value>
 				<value>/jmx/</value>
 				<value>/highcharts/</value>
 				<value>/highcharts</value>
 				
 			</set>
 		</property>
 	</bean> 
 	
 	<bean id="JSONMarshaller" class="org.helios.apmrouter.dataservice.json.marshalling.GSONJSONMarshaller">
 		<property name="adapterInstances">
 			<map>
 				<entry value-ref="ObjectNameSerializer" >
 					<key><value type="java.lang.Class">javax.management.ObjectName</value></key>
 				</entry>
 				<entry value-ref="CompositeDataSupportSerializer" >
 					<key><value type="java.lang.Class">javax.management.openmbean.CompositeDataSupport</value></key>
 				</entry>
 				<entry value-ref="UtilDateSerializer" >
 					<key><value type="java.lang.Class">java.util.Date</value></key>
 				</entry>
 				
 			</map>
 		</property>
 	</bean>
 	
	<bean id="CompositeDataSupportSerializer" class="org.helios.apmrouter.dataservice.json.marshalling.encoders.CompositeDataSupportSerializer"/>
 	<bean id="ObjectNameSerializer" class="org.helios.apmrouter.dataservice.json.marshalling.encoders.ObjectNameSerializer"/>
 	<bean id="UtilDateSerializer" class="org.helios.apmrouter.dataservice.json.marshalling.encoders.UtilDateSerializer" />

	 <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	    <property name="dataSource" ref="DataSource"/>
	  </bean>

	  
	 <bean id="DataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close" >
	   <property name="driverClass" value="org.h2.Driver" />
	   <property name="jdbcUrl" value="jdbc:h2:file:~/.apmrouter/h2/db;JMX=TRUE;MULTI_THREADED=TRUE;DB_CLOSE_DELAY=-1" />
	   <property name="username" value="sa"/>
	   <property name="password" value=""/>
	   <property name="idleConnectionTestPeriod" value="60"/>
	   <property name="idleMaxAge" value="240"/>
	   <property name="maxConnectionsPerPartition" value="30"/>
	   <property name="minConnectionsPerPartition" value="5"/>
	   <property name="partitionCount" value="3"/>
	   <property name="acquireIncrement" value="5"/>
	   <property name="statementsCacheSize" value="100"/>
	   <property name="preparedStatementsCacheSize" value="100"/>
	   <property name="releaseHelperThreads" value="3"/>
	   <property name="statisticsEnabled" value="true"/>
	   <property name="disableJMX" value="false"/>
	   <property name="poolName" value="Catalog"/>
	   <property name="connectionTestStatement" value="SELECT SYSTIME"/>	   
	</bean>
	
	 <bean id="OpenTSDBDataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close">
	   <property name="driverClass" value="org.h2.Driver" />
	   <property name="jdbcUrl" value="jdbc:h2:file:~/.apmrouter/h2/tsdb;JMX=TRUE;MULTI_THREADED=TRUE;DB_CLOSE_DELAY=-1" />
	   <property name="username" value="TSDB"/>
	   <property name="password" value=""/>
	   <property name="idleConnectionTestPeriod" value="60"/>
	   <property name="idleMaxAge" value="240"/>
	   <property name="maxConnectionsPerPartition" value="30"/>
	   <property name="minConnectionsPerPartition" value="5"/>
	   <property name="partitionCount" value="1"/>
	   <property name="acquireIncrement" value="5"/>
	   <property name="statementsCacheSize" value="100"/>
	   <property name="preparedStatementsCacheSize" value="100"/>
	   <property name="releaseHelperThreads" value="3"/>
	   <property name="statisticsEnabled" value="true"/>
	   <property name="disableJMX" value="false"/>
	   <property name="poolName" value="OpenTSDB"/>
	   <property name="connectionTestStatement" value="SELECT SYSTIME"/>
	</bean>
	

	<bean id="h2exporter" class="org.springframework.jmx.export.MBeanExporter">
		<property name="beans">
			<map>
				<entry key="org.h2:service=ConnectionPool,type=Catalog" value-ref="DataSource" />								
				<!-- <entry key="org.h2:service=ConnectionPoolStats,type=Catalog" value-ref="DataSourceStats" /> -->				
			</map>
		</property>
		<property name="server" ref="MBeanServer" />
	</bean>	

	    
	    <bean id="H2WebServer" class="org.h2.tools.Server"
	        factory-method="createWebServer" init-method="start">
	        <constructor-arg value="-web,-webAllowOthers,-webPort,3082" />
	    </bean>
	    <bean id="H2TCPServer" class="org.h2.tools.Server"
	        factory-method="createTcpServer" init-method="start">
	        <constructor-arg value="-tcp,-tcpAllowOthers,-tcpPort,3083" />
	    </bean>	   
	
		<!-- 
			To connect remotely:   jdbc:h2:tcp://localhost:3083/file:~/.apmrouter/h2/db
		 -->
	
	<bean id="H2DataSource" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy" >
		<qualifier value="H2DataSource" />
		<property name="targetDataSource" ref="DataSource" />
		<property name="reobtainTransactionalConnections" value="true" />
	</bean>
	

	<bean id="TimeSeriesWorkerPool" class="org.helios.apmrouter.util.thread.ManagedThreadPool">
		<qualifier value="TimeSeriesWorker"/>
		<constructor-arg>
			<bean id="TimeSeriesWorker" class="org.helios.apmrouter.util.thread.ThreadPoolConfig">
				<property name="corePoolSize" value="5" />
				<property name="maximumPoolSize" value="10" />
				<property name="coreThreadsStarted" value="3" />
				<property name="daemonThreads" value="true" />
				<property name="fairQueue" value="false" />
				<property name="queueSize" value="10000" />
				<property name="keepAliveTime" value="20000" />
			</bean>
		</constructor-arg>
	</bean>
	
	<bean id="chronicleTs" class="org.helios.apmrouter.destination.chronicletimeseries.ChronicleTSManager">
		<constructor-arg value="p=15s,t=5m" />
		<property name="executorService" ref="TimeSeriesWorkerPool"/>
	</bean>
	


	
	<bean id="dbInit" class="org.helios.apmrouter.catalog.jdbc.h2.ScriptExecution" init-method="startUrl">		
		<constructor-arg ref="DataSource" />
		<constructor-arg value="default-config/ddl/persistent-metric-catalog.sql" />
	</bean>
	
	<bean id="opentsdbInit" class="org.helios.apmrouter.catalog.jdbc.h2.ScriptExecution" init-method="startUrl">
		<constructor-arg ref="OpenTSDBDataSource" />
		<constructor-arg value="default-config/ddl/opentsdb.sql" />
	</bean>
	
	
	
	 		
		<bean id="H2DestinationWorkers" class="org.helios.apmrouter.util.thread.ManagedThreadPool">		
			<constructor-arg>
				<bean id="H2DestinationWorkersConfig" class="org.helios.apmrouter.util.thread.ThreadPoolConfig">
					<property name="corePoolSize" value="1" />
					<property name="maximumPoolSize" value="5" />
					<property name="coreThreadsStarted" value="1" />
				</bean>
			</constructor-arg>
		</bean>
	
	
	<bean id="H2TimeSeriesDestination" class="org.helios.apmrouter.destination.h2timeseries.H2TimeSeriesDestination">
 		<property name="matchPatterns">
	 		<util:set>
				<value>LONG.*|DELTA.*</value>	 			
	 		</util:set>
 		</property>	
		<property name="dataSource" ref="DataSource"></property>
		<property name="timeSeriesStep" value="15000"></property>
		<property name="timeSeriesWidth" value="60"></property>
		<property name="sizeTrigger" value="100"></property>
		<property name="timeTrigger" value="15000"></property>
		<property name="timeSeriesManager" ref="chronicleTs" />
	</bean>
	
   <bean id="sessionFactory"
        class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <property name="dataSource" ref="H2DataSource" />
        <property name="useTransactionAwareDataSource" value="true" />
        <property name="configLocation">
            <value>classpath:hibernate/hibernate.cfg.xml</value>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.H2Dialect</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.cache.use_second_level_cache">false</prop>
                <prop key="hibernate.cache.use_query_cache">false</prop>
                
            </props>
        </property>
    </bean>
 
    <tx:annotation-driven />
    
	
	<bean id="MBeanServer" class="java.lang.management.ManagementFactory"
		lazy-init="false" factory-method="getPlatformMBeanServer">
	</bean>
	
	<bean id="ExtendedThreadManager" class="org.helios.apmrouter.jmx.threadinfo.ExtendedThreadManager" factory-method="install" >
		<property name="maxDepth" value="50" />
	</bean>

	<bean id="MBeanServerJMXUrl" class="javax.management.remote.JMXServiceURL"
		lazy-init="false" depends-on="systemProperties" >
		<constructor-arg type="java.lang.String"
			value="service:jmx:rmi://localhost:${org.helios.jmx.listener.service:9005}/jndi/rmi://localhost:${org.helios.jmx.listener.registry:9006}/jmxrmi" />
	</bean>
	
	<bean id="RMIRegistry" class="java.rmi.registry.LocateRegistry"
		lazy-init="false" factory-method="createRegistry" >
		<constructor-arg value="${org.helios.jmx.listener.registry:9006}" />
	</bean>
	
	<bean id="MBeanServerConnector" class="javax.management.remote.JMXConnectorServerFactory"
		lazy-init="false" init-method="start" factory-method="newJMXConnectorServer"
		depends-on="RMIRegistry">
		<constructor-arg ref="MBeanServerJMXUrl" />
		<constructor-arg>
			<map />
		</constructor-arg>
		<constructor-arg ref="MBeanServer" />
	</bean>
	
	<bean id="gconsole" class="org.helios.apmrouter.GroovyService" />
	
	<bean id="liveBeansView" class="org.springframework.context.support.LiveBeansView"/>
		
	

	 
	<bean id="exporter" class="org.springframework.jmx.export.MBeanExporter">
		<property name="beans">
			<map>
				<entry key="org.helios.jmx:service=JMXConnectorServer,protocol=rmi" value-ref="MBeanServerConnector" />				
				<entry key="DefaultDomain:application=/APMRouterServer" value-ref="liveBeansView" />
			</map>
		</property>
		<property name="server" ref="MBeanServer" />
	</bean>	
	
	
	<bean id="log4jManager" class="org.apache.log4j.jmx.HierarchyDynamicMBean"/>
	
	
		
	
</beans>

